@use "sass:math";

@import "variables";
@import "~bootstrap/scss/mixins";

@mixin themeProperty($theme, $property, $color, $additionalPropertiesPositionIsFront, $additionalProperties) {
  @if $additionalPropertiesPositionIsFront {
    #{$property}: unquote($additionalProperties + ' ' + map-get($theme, $color));
  } @else {
    #{$property}: unquote(map-get($theme, $color) + ' ' + $additionalProperties);
  }
}

@mixin processTheme($module, $property, $color, $additionalPropertiesPositionIsFront, $additionalProperties) {
  $light: map-get($themes, $light-theme);
  $dark: map-get($themes, $dark-theme);

  @include themeProperty($light, $property, $color, $additionalPropertiesPositionIsFront, $additionalProperties);

  @if $module {
    :global(.#{$dark-theme}) & {
      @include themeProperty($dark, $property, '#{$color}', $additionalPropertiesPositionIsFront, $additionalProperties);
    }
  } @else {
    .#{$dark-theme} & {
      @include themeProperty($dark, $property, '#{$color}', $additionalPropertiesPositionIsFront, $additionalProperties);
    }
  }
}

@mixin theme($property, $color, $additionalPropertiesPositionIsFront: false, $additionalProperties: '') {
  @include processTheme(false, $property, $color, $additionalPropertiesPositionIsFront, $additionalProperties)
}

@mixin themeModule($property, $color, $additionalPropertiesPositionIsFront: false, $additionalProperties: '') {
  @include processTheme(true, $property, $color, $additionalPropertiesPositionIsFront, $additionalProperties)
}

@mixin position($type, $top, $right, $bottom, $left, $zindex:'') {
  position: $type;
  @if $top !='' {
    top: $top;
  }
  @if $right !='' {
    right: $right;
  }
  @if $bottom !='' {
    bottom: $bottom;
  }
  @if $left !='' {
    left: $left
  }
  @if $zindex !='' {
    z-index: $zindex;
  }
}

@mixin line-clamp($line: 1, $boxOrient: vertical) {
  display: -webkit-box;
  -webkit-line-clamp: $line;
  -webkit-box-orient: $boxOrient;
  overflow: hidden;
}

/* mixin for multiline */
@mixin multiLineEllipsis($lineHeight: 1.2em, $lineCount: 2, $bgColor: white) {
  overflow: hidden;
  position: relative;
  line-height: $lineHeight;
  max-height: $lineHeight * $lineCount;
  margin-right: -1em;
  padding-right: 1em;
  &::after {
    content: '...';
    position: absolute;
    right: 0;
    top: $lineHeight;
    width: 12%;
    padding-left: 6px;
    background: $bgColor;
  }
}

@mixin flex-row() {
  -webkit-box-orient: horizontal !important;
  -webkit-box-direction: normal !important;
  -webkit-flex-direction: row !important;
  -ms-flex-direction: row !important;
  flex-direction: row !important;
}

@mixin flex-row-reverse() {
  -webkit-box-orient: horizontal !important;
  -webkit-box-direction: reverse !important;
  -webkit-flex-direction: row-reverse !important;
  -ms-flex-direction: row-reverse !important;
  flex-direction: row-reverse !important;
}

@mixin backdrop() {
  position: fixed;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  background: #000;
  opacity: 0.7;
  z-index: $zindex-fixed;
}

@mixin media-fluid() {
  .youtube-video, iframe, video, audio {
    max-width: 100%;
  }
}

@mixin is-lg-regular() {
  font-size: 1.57rem;
  font-family: 'is-lg-regular', $font-family-base;
  font-weight: normal !important;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

@mixin alert-variant-custom($theme-color-name, $theme-background-name, $theme-icon-color: false) {
  @include theme('color', $theme-color-name);
  @include theme('background', $theme-background-name);

  .close {
    @include theme('color', $theme-color-name);
  }

  a, .alert-link {
    @include theme('color', $theme-color-name);
    font-weight: bold;
    text-decoration: underline;
  }

  @if $theme-icon-color {
    .is-icon {
      @include theme('color', $theme-icon-color);
    }

    svg.is-icon {
      @include theme('fill', $theme-icon-color);
    }
  }
}

@mixin panel-variant-custom($theme-background-name, $theme-color-name: false) {
  @include theme('background', $theme-background-name, false, '!important');

  @if $theme-color-name {
    @include theme('color', $theme-color-name);
  }
}

@mixin ideaDetailsSectionHeading() {
  font-size: $font-size-sm;
  color: $text-gray-dark;
  font-weight: bold;
}

// https://github.com/philipwalton/flexbugs/issues/216#issuecomment-359042902
@mixin ie11-workaround-for-flexbox-max-height-overflow() {
  display: flex;
  flex-direction: row;
}

@mixin ios-auto-zooming-fix() {
  @media only screen and (max-device-width: breakpoint-max(md, $grid-breakpoints)) and (-webkit-min-device-pixel-ratio: 0) {
    @content
  }
}

@mixin fix-width($width) {
  width: $width;
  max-width: $width;
  flex-basis: $width;
}

@mixin media-color-scheme-dark() {
  @media (prefers-color-scheme: dark) {
    @content
  }
}

@mixin generate-utility($utility, $infix) {
  $values: map-get($utility, values);

  @if type-of($values) == "string" or type-of(nth($values, 1)) != "list" {
    $values: zip($values, $values);
  }

  @each $key, $value in $values {
    $properties: map-get($utility, property);

    @if type-of($properties) == "string" {
      $properties: append((), $properties);
    }

    $property-class: if(
                    map-has-key($utility, class),
                    map-get($utility, class),
                    nth($properties, 1)
    );
    $property-class: if($property-class == null, "", $property-class);

    $infix: if(
                    $property-class == "" and str-slice($infix, 1, 1) == "-",
                    str-slice($infix, 2),
                    $infix
    );

    $property-class-modifier: if(
                    $key,
                    if($property-class == "" and $infix == "", "", "-") + $key,
                    ""
    );

    .#{$property-class + $infix + $property-class-modifier} {
      @each $property in $properties {
        #{$property}: $value !important;
      }
    }
  }
}

@mixin custom-hover-focus() {
  &:hover,
  &:focus {
    @content;
  }
}

@mixin sr-only() {
  @include visually-hidden()
}

@function parseInt($n) {
  @return math.div($n, $n * 0 + 1);
}

@function rem-to-px($size) {
  $value: parseInt($size) * $font-size-base-px;
  @return round($value);
}

@mixin check-mark() {
  .check-mark {
    position: absolute;
    top: 1px;
    left: 0;
    height: $custom-checkbox-diameter;
    width: $custom-checkbox-diameter;
    border: 2px solid;
    @include theme('border-color', $theme-checkbox-border-color);
    border-radius: 50%;
    transition: all 0.3s ease-in-out;

    &:after {
      position: absolute;
      top: 0;
      left: 4px;
      width: math.div($custom-checkbox-diameter, 3);
      height: $custom-checkbox-diameter * 0.5 + 2px;
    }
  }
}